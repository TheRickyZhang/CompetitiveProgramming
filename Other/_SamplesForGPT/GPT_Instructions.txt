Respond with C++ code in my style. Ignore any common code conventions, as I like to write very concise code with minimal comments, minimal brackets, and more horizontal space than vertical space.
Always assume any code that is discussed has these macros. Do not provide these again on output.

#include <bits/stdc++.h>
using namespace std;

using vi = vector<int>; using ll = long long; using vll = vector<long long>; using vb = vector<bool>; using vs = vector<string>; using pii = pair<int, int>;
using pll = pair<ll, ll>; using vpii = vector<pii>; using vpll = vector<pll>; using pq = priority_queue<ll>; using pqq = priority_queue<pll>;
using vvi = vector<vector<int>>; using vvll = vector<vector<ll>>; using mpq = priority_queue<ll, vector<ll>, greater<>>; using mpqq = priority_queue<pll, vpll, greater<>>;
#define ump unordered_map
#define ust unordered_set
#define f(i, to) for (int i = 0; i < (to); ++i)
#define rep(i, a, b) for (int i = (a); i < (b); ++i)
#define repr(i, a, b) for (int i = (a)-1; i >= (b); --i)
#define ff first
#define ss second
#define pb push_back
#define trav(a, x) for (auto &a : x)
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
#define str string
constexpr int MOD = 1000000007; constexpr int INF = INT_MAX-37; const vector<pii> dirs = {{1, 0}, {0, -1}, {0, 1}, {-1, 0}}; constexpr char en = '\n'; constexpr char sp = ' ';
template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os<<"("<<p.first<<", "<<p.second<<")"; }
template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os<<"{"; string sep; for (const T &x : v) os<<sep<<x, sep = ", "; return os<<"}"; }
template<typename K, typename V> ostream& operator<<(ostream &os, const map<K, V> &m) { os<<"{"; string sep; for (const auto &kv : m) os<<sep<<kv.first<<": "<<kv.second, sep = ", "; return os<<"}"; }
struct pairHash { template <class T1, class T2> size_t operator()(const pair<T1, T2>& p) const { return hash<T1>{}(p.first) ^ (hash<T2>{}(p.second)<<1); } };
struct vectorHash { template <class T> size_t operator()(const vector<T>& v) const { size_t hashValue = 0; for (const T& i : v) hashValue ^= hash<T>{}(i) + 0x9e3779b9 + (hashValue<<6) + (hashValue >> 2); return hashValue; } };
auto check = [](auto y, auto x, auto m, auto n) { return y >= 0 && y < m && x >= 0 && x < n; };

These are typically common variable names I use. Note there is some flexibility depending on context, with some terms being used for a single item or a vector.

a, b: generic numbers or vectors
c: generic character
d: distance
e: edge list, even
f: flag
g: graph, gcd
h: high
i, j: indices
k: number of queries or goal number.
l: left
m: secondary number, such as the secondary boundary in a rectangular grid.
n: important number in problem
o: odd
p: parent
q: queue or priority queue
r: right
s: generic string or set
t: number of test cases or time
u, v, w: from, to, weight
x, y: coordinates
z: z-array for strings

nums: generic 1D vector of values
grid: generic 2D+ vector of values
dp: dynamic programming table
pos: position, often when i not available
d_, such as dx: change in value
n_, such as nx: new value
vis: visited array
res: result
adj: adjacency list
mx, mn: maximum, minimum.
curr: current value
diff: difference
sz: size
pre, suf: prefix, suffix arrays.
tree: underlying array for binary-indexed and segment trees
pi: pi array for strings
bfs, dfs
freq: frequency vector or map
it: iterator of some sort
ch: children
ln: log2 of max

For syntax and formatting, please see example code snippets I have uploaded.