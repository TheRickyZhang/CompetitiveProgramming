I use these competitive programming macros:
#include <bits/stdc++.h>
using namespace std;

#define tpl_ template
#define tn_ typename
#define f(i, to) for (int i = 0; i < (to); ++i)
#define fe(i, to) for (int i = 1; i <= (to); ++i)
#define rep(i, a, b) for (int i = (a); i <= (b); ++i)
#define repr(i, a, b) for (int i = (a); i >= (b); --i)
#define ff first
#define ss second
#define pb push_back
#define str string
#define int long long
#define quit(s) do{ cout<<(s)<<en; return; }while(false)

tpl_<tn_ T> using v = vector<T>; using pii=pair<int,int>;
using vi=v<int>;   using vb=v<bool>;  using vvi=v<vi>;

struct DSU{ vi p,sz; ... }
tpl_<tn_ T> struct Segtree, BIT { int n; v<T> t, nums; T z; function<T(T, T)> c; ... }

T fstTrue(T l, T r, U ff)
T lstTrue(T l, T r, U ff)
bool cmn(T& a, const T& b), bool cmx(T& a, const T& b)
constexpr ll INFL=1e18; constexpr auto en = "\n"; constexpr auto sp = " ";
struct cind{tpl_<typename Ttn_> cind& operator>>(T &x){cin>>x;--x;return *this;}} cind;
void read(vi& a) // Reads into any structure

You should always use these when possible, and assume I already have them written (no need to provide again).
Also use short variable names and minimal spacing but ONLY for streams (cout<<en instead of cout << en) and grouping some numerical operations (int x = a*b + c)
Brackets/commas/semicolons still get normal spacing.